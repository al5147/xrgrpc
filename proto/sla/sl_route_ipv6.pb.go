// @file
// @brief Server RPC proto file for IPv6.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.5.0
// source: sl_route_ipv6.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPv6 route
type SLRoutev6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 Prefix
	//0:: - ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
	Prefix []byte `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length [0-128]
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Common route attributes
	RouteCommon *SLRouteCommon `protobuf:"bytes,3,opt,name=RouteCommon,proto3" json:"RouteCommon,omitempty"`
	// List of route paths for a particular route.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList []*SLRoutePath `protobuf:"bytes,4,rep,name=PathList,proto3" json:"PathList,omitempty"`
}

func (x *SLRoutev6) Reset() {
	*x = SLRoutev6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6) ProtoMessage() {}

func (x *SLRoutev6) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6.ProtoReflect.Descriptor instead.
func (*SLRoutev6) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{0}
}

func (x *SLRoutev6) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SLRoutev6) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *SLRoutev6) GetRouteCommon() *SLRouteCommon {
	if x != nil {
		return x.RouteCommon
	}
	return nil
}

func (x *SLRoutev6) GetPathList() []*SLRoutePath {
	if x != nil {
		return x.PathList
	}
	return nil
}

// List of routes for bulk download
type SLRoutev6Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=SLObjectOp" json:"Oper,omitempty"`
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// List of routes for the VRF specified above
	Routes []*SLRoutev6 `protobuf:"bytes,4,rep,name=Routes,proto3" json:"Routes,omitempty"`
}

func (x *SLRoutev6Msg) Reset() {
	*x = SLRoutev6Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6Msg) ProtoMessage() {}

func (x *SLRoutev6Msg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6Msg.ProtoReflect.Descriptor instead.
func (*SLRoutev6Msg) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{1}
}

func (x *SLRoutev6Msg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLRoutev6Msg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev6Msg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev6Msg) GetRoutes() []*SLRoutev6 {
	if x != nil {
		return x.Routes
	}
	return nil
}

// IPv6 route result, uniquely identified by the Prefix/PrefixLen pair
type SLRoutev6Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// IPv6 Prefix
	Prefix []byte `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
}

func (x *SLRoutev6Res) Reset() {
	*x = SLRoutev6Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6Res) ProtoMessage() {}

func (x *SLRoutev6Res) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6Res.ProtoReflect.Descriptor instead.
func (*SLRoutev6Res) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{2}
}

func (x *SLRoutev6Res) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLRoutev6Res) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SLRoutev6Res) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

// IPv6 bulk route result status
type SLRoutev6MsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name (matches the VRF name of the original operation)
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,3,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLRoutev6Res `protobuf:"bytes,4,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLRoutev6MsgRsp) Reset() {
	*x = SLRoutev6MsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6MsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6MsgRsp) ProtoMessage() {}

func (x *SLRoutev6MsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6MsgRsp.ProtoReflect.Descriptor instead.
func (*SLRoutev6MsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{3}
}

func (x *SLRoutev6MsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev6MsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev6MsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLRoutev6MsgRsp) GetResults() []*SLRoutev6Res {
	if x != nil {
		return x.Results
	}
	return nil
}

// Used to retrieve route attributes
type SLRoutev6GetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// IPv6 Prefix
	Prefix []byte `protobuf:"bytes,3,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,4,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,5,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,6,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLRoutev6GetMsg) Reset() {
	*x = SLRoutev6GetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6GetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6GetMsg) ProtoMessage() {}

func (x *SLRoutev6GetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6GetMsg.ProtoReflect.Descriptor instead.
func (*SLRoutev6GetMsg) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{4}
}

func (x *SLRoutev6GetMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev6GetMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev6GetMsg) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SLRoutev6GetMsg) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *SLRoutev6GetMsg) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLRoutev6GetMsg) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

// Gt Route message response
type SLRoutev6GetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,2,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,4,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLRoutev6 `protobuf:"bytes,5,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLRoutev6GetMsgRsp) Reset() {
	*x = SLRoutev6GetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv6_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev6GetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev6GetMsgRsp) ProtoMessage() {}

func (x *SLRoutev6GetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv6_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev6GetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLRoutev6GetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv6_proto_rawDescGZIP(), []int{5}
}

func (x *SLRoutev6GetMsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev6GetMsgRsp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLRoutev6GetMsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev6GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLRoutev6GetMsgRsp) GetEntries() []*SLRoutev6 {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_sl_route_ipv6_proto protoreflect.FileDescriptor

var file_sl_route_ipv6_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x36, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x0b, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x50, 0x61, 0x74,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x36, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52,
	0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x52, 0x06, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36,
	0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x76, 0x36, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53,
	0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x76, 0x36, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6f, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53,
	0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x36, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x32, 0xbb, 0x04,
	0x0a, 0x0d, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x13, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e,
	0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x17, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x36, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1c, 0x2e,
	0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x11, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4f, 0x70,
	0x12, 0x0c, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x0f,
	0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x12, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x12, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x14, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x56, 0x72, 0x66, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x0f, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x53, 0x4c, 0x56, 0x52, 0x46, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x4f, 0x70, 0x12, 0x0d, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x36, 0x4d, 0x73, 0x67, 0x1a, 0x10, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x76, 0x36, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x53, 0x4c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x12, 0x38, 0x0a, 0x11, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x4f, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0d, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x36, 0x4d, 0x73, 0x67, 0x1a, 0x10, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36,
	0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x12, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x10, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x1a, 0x13, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x36, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_route_ipv6_proto_rawDescOnce sync.Once
	file_sl_route_ipv6_proto_rawDescData = file_sl_route_ipv6_proto_rawDesc
)

func file_sl_route_ipv6_proto_rawDescGZIP() []byte {
	file_sl_route_ipv6_proto_rawDescOnce.Do(func() {
		file_sl_route_ipv6_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_route_ipv6_proto_rawDescData)
	})
	return file_sl_route_ipv6_proto_rawDescData
}

var file_sl_route_ipv6_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sl_route_ipv6_proto_goTypes = []interface{}{
	(*SLRoutev6)(nil),                   // 0: SLRoutev6
	(*SLRoutev6Msg)(nil),                // 1: SLRoutev6Msg
	(*SLRoutev6Res)(nil),                // 2: SLRoutev6Res
	(*SLRoutev6MsgRsp)(nil),             // 3: SLRoutev6MsgRsp
	(*SLRoutev6GetMsg)(nil),             // 4: SLRoutev6GetMsg
	(*SLRoutev6GetMsgRsp)(nil),          // 5: SLRoutev6GetMsgRsp
	(*SLRouteCommon)(nil),               // 6: SLRouteCommon
	(*SLRoutePath)(nil),                 // 7: SLRoutePath
	(SLObjectOp)(0),                     // 8: SLObjectOp
	(*SLErrorStatus)(nil),               // 9: SLErrorStatus
	(*SLRouteGlobalsGetMsg)(nil),        // 10: SLRouteGlobalsGetMsg
	(*SLRouteGlobalStatsGetMsg)(nil),    // 11: SLRouteGlobalStatsGetMsg
	(*SLVrfRegMsg)(nil),                 // 12: SLVrfRegMsg
	(*SLVrfRegGetMsg)(nil),              // 13: SLVrfRegGetMsg
	(*SLRouteGlobalsGetMsgRsp)(nil),     // 14: SLRouteGlobalsGetMsgRsp
	(*SLRouteGlobalStatsGetMsgRsp)(nil), // 15: SLRouteGlobalStatsGetMsgRsp
	(*SLVrfRegMsgRsp)(nil),              // 16: SLVrfRegMsgRsp
	(*SLVrfRegGetMsgRsp)(nil),           // 17: SLVrfRegGetMsgRsp
	(*SLVRFGetStatsMsgRsp)(nil),         // 18: SLVRFGetStatsMsgRsp
}
var file_sl_route_ipv6_proto_depIdxs = []int32{
	6,  // 0: SLRoutev6.RouteCommon:type_name -> SLRouteCommon
	7,  // 1: SLRoutev6.PathList:type_name -> SLRoutePath
	8,  // 2: SLRoutev6Msg.Oper:type_name -> SLObjectOp
	0,  // 3: SLRoutev6Msg.Routes:type_name -> SLRoutev6
	9,  // 4: SLRoutev6Res.ErrStatus:type_name -> SLErrorStatus
	9,  // 5: SLRoutev6MsgRsp.StatusSummary:type_name -> SLErrorStatus
	2,  // 6: SLRoutev6MsgRsp.Results:type_name -> SLRoutev6Res
	9,  // 7: SLRoutev6GetMsgRsp.ErrStatus:type_name -> SLErrorStatus
	0,  // 8: SLRoutev6GetMsgRsp.Entries:type_name -> SLRoutev6
	10, // 9: SLRoutev6Oper.SLRoutev6GlobalsGet:input_type -> SLRouteGlobalsGetMsg
	11, // 10: SLRoutev6Oper.SLRoutev6GlobalStatsGet:input_type -> SLRouteGlobalStatsGetMsg
	12, // 11: SLRoutev6Oper.SLRoutev6VrfRegOp:input_type -> SLVrfRegMsg
	13, // 12: SLRoutev6Oper.SLRoutev6VrfRegGet:input_type -> SLVrfRegGetMsg
	13, // 13: SLRoutev6Oper.SLRoutev6VrfGetStats:input_type -> SLVrfRegGetMsg
	1,  // 14: SLRoutev6Oper.SLRoutev6Op:input_type -> SLRoutev6Msg
	4,  // 15: SLRoutev6Oper.SLRoutev6Get:input_type -> SLRoutev6GetMsg
	1,  // 16: SLRoutev6Oper.SLRoutev6OpStream:input_type -> SLRoutev6Msg
	4,  // 17: SLRoutev6Oper.SLRoutev6GetStream:input_type -> SLRoutev6GetMsg
	14, // 18: SLRoutev6Oper.SLRoutev6GlobalsGet:output_type -> SLRouteGlobalsGetMsgRsp
	15, // 19: SLRoutev6Oper.SLRoutev6GlobalStatsGet:output_type -> SLRouteGlobalStatsGetMsgRsp
	16, // 20: SLRoutev6Oper.SLRoutev6VrfRegOp:output_type -> SLVrfRegMsgRsp
	17, // 21: SLRoutev6Oper.SLRoutev6VrfRegGet:output_type -> SLVrfRegGetMsgRsp
	18, // 22: SLRoutev6Oper.SLRoutev6VrfGetStats:output_type -> SLVRFGetStatsMsgRsp
	3,  // 23: SLRoutev6Oper.SLRoutev6Op:output_type -> SLRoutev6MsgRsp
	5,  // 24: SLRoutev6Oper.SLRoutev6Get:output_type -> SLRoutev6GetMsgRsp
	3,  // 25: SLRoutev6Oper.SLRoutev6OpStream:output_type -> SLRoutev6MsgRsp
	5,  // 26: SLRoutev6Oper.SLRoutev6GetStream:output_type -> SLRoutev6GetMsgRsp
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sl_route_ipv6_proto_init() }
func file_sl_route_ipv6_proto_init() {
	if File_sl_route_ipv6_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_route_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_route_ipv6_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv6_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv6_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv6_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6MsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv6_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6GetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv6_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev6GetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_route_ipv6_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_route_ipv6_proto_goTypes,
		DependencyIndexes: file_sl_route_ipv6_proto_depIdxs,
		MessageInfos:      file_sl_route_ipv6_proto_msgTypes,
	}.Build()
	File_sl_route_ipv6_proto = out.File
	file_sl_route_ipv6_proto_rawDesc = nil
	file_sl_route_ipv6_proto_goTypes = nil
	file_sl_route_ipv6_proto_depIdxs = nil
}
